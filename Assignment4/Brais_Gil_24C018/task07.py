# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ZlJzk1xSPpwdninSqwz4KFtCH3LlhDp

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples
for clase in g.subjects(RDF.type, RDFS.Class):
  super = g.value(clase, RDFS.subClassOf)
  if super:
    result.append((clase, super))
  else:
    result.append((clase,None))
print(result)
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
Select ?c ?sc
Where {
    ?c rdf:type rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc}
}"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")
clases=[ns.Person, ns.Student, ns.Professor, ns.AssociateProfessor, ns.InterimAssociateProfessor, ns.FullProfessor]
# variable to return
individuals = []
for clase in clases:
  for subject in g.subjects(RDF.type, clase):
    individuals.append(subject)
# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>

Select ?ind
Where {
  ?ind rdf:type/rdfs:subClassOf* ns:Person.
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>

Select ?name ?type
Where {
  ?x ns:knows ns:Rocky .
  ?x rdfs:label ?name.
  ?x rdf:type ?type.
}
"""
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
Select Distinct ?name
Where {{
  ?x ns:hasColleague ?z .
  ?z ns:ownsPet ?pet .
  ?pet rdf:type ns:Animal.
}
Union {
  ?x ns:hasColleague ?z .
  ?z ns:hasColleague ?b .
  ?b ns:ownsPet ?pet .
  ?pet rdf:type ns:Animal.
}
?x rdfs:label ?name .
}
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")